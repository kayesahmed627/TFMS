// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TFMS.Lib.Models;

#nullable disable

namespace TFMS.API.Migrations
{
    [DbContext(typeof(FairDbContext))]
    partial class FairDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TFMS.Lib.Models.Attendence", b =>
                {
                    b.Property<int>("AttendenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendenceId"));

                    b.Property<DateTime?>("AttendenceDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EndTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<int>("StaffDetailId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.HasKey("AttendenceId");

                    b.HasIndex("StaffDetailId");

                    b.ToTable("Attendences");

                    b.HasData(
                        new
                        {
                            AttendenceId = 1,
                            AttendenceDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 22, 15, 0, 0),
                            StaffDetailId = 1,
                            StartTime = new TimeSpan(0, 8, 55, 0, 0)
                        },
                        new
                        {
                            AttendenceId = 2,
                            AttendenceDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 22, 10, 0, 0),
                            StaffDetailId = 2,
                            StartTime = new TimeSpan(0, 8, 57, 0, 0)
                        },
                        new
                        {
                            AttendenceId = 3,
                            AttendenceDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 22, 12, 0, 0),
                            StaffDetailId = 3,
                            StartTime = new TimeSpan(0, 8, 58, 0, 0)
                        },
                        new
                        {
                            AttendenceId = 4,
                            AttendenceDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 22, 5, 0, 0),
                            StaffDetailId = 4,
                            StartTime = new TimeSpan(0, 8, 50, 0, 0)
                        },
                        new
                        {
                            AttendenceId = 5,
                            AttendenceDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 22, 7, 0, 0),
                            StaffDetailId = 5,
                            StartTime = new TimeSpan(0, 8, 53, 0, 0)
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<decimal?>("BookingAmount")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<DateTime?>("BookingDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int>("ExhibitorId")
                        .HasColumnType("int");

                    b.Property<int>("PavilionId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("ExhibitorId");

                    b.HasIndex("PavilionId")
                        .IsUnique();

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingAmount = 50000m,
                            BookingDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExhibitorId = 1,
                            PavilionId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            BookingAmount = 50000m,
                            BookingDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExhibitorId = 2,
                            PavilionId = 2
                        },
                        new
                        {
                            BookingId = 3,
                            BookingAmount = 50000m,
                            BookingDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExhibitorId = 3,
                            PavilionId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<TimeSpan?>("EndTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<DateTime?>("EventDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpeakerDetails")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("StartTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            EventDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDescription = "New Product Launch",
                            EventName = "New Product Launch",
                            SpeakerDetails = "CEO of Walton",
                            SpeakerName = "Mr. Murad",
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            VenueId = 1
                        },
                        new
                        {
                            EventId = 2,
                            EndTime = new TimeSpan(0, 1, 0, 0, 0),
                            EventDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDescription = "New Brand Launch",
                            EventName = "Brand Promotion",
                            SpeakerDetails = "Md of Lorial",
                            SpeakerName = "Ms. Shila",
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            VenueId = 2
                        },
                        new
                        {
                            EventId = 3,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            EventDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDescription = "New Product Launch",
                            EventName = "New Product Launch",
                            SpeakerDetails = "CEO of Akij",
                            SpeakerName = "Mr. Fahad",
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            VenueId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.EventReg", b =>
                {
                    b.Property<int>("EventRegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventRegId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("EventRegId");

                    b.HasIndex("EventId");

                    b.HasIndex("VisitorId");

                    b.ToTable("EventsReg");

                    b.HasData(
                        new
                        {
                            EventRegId = 1,
                            EventId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            EventRegId = 2,
                            EventId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            EventRegId = 3,
                            EventId = 3,
                            VisitorId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Exhibitor", b =>
                {
                    b.Property<int>("ExhibitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExhibitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TradeLicence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExhibitorId");

                    b.ToTable("Exhibitors");

                    b.HasData(
                        new
                        {
                            ExhibitorId = 1,
                            CompanyName = "viyla text",
                            ContactNumber = "0125486325",
                            Description = "a person whose work is being shown in an exhibiton",
                            Email = "veyela125@gmail.com",
                            LogoUrl = "logo1.jpg",
                            TradeLicence = "1254",
                            Website = "wwwveyelatext123.com"
                        },
                        new
                        {
                            ExhibitorId = 2,
                            CompanyName = "Anower Group",
                            ContactNumber = "0155486325",
                            Description = "Exhibitors set up a wide variety of trade show display",
                            Email = "Anower@gmail.com",
                            LogoUrl = "logo2.jpg",
                            TradeLicence = "3500",
                            Website = "wwwtext123.com"
                        },
                        new
                        {
                            ExhibitorId = 3,
                            CompanyName = "Mgf Group",
                            ContactNumber = "0121286325",
                            Description = "a person whose work is being shown in an exhibiton",
                            Email = "Mgf@gmail.com",
                            LogoUrl = "logo3.jpg",
                            TradeLicence = "1583",
                            Website = "wwwMgf123.com"
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.ExhibitorEntryExit", b =>
                {
                    b.Property<int>("ExhibitorEntryExitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExhibitorEntryExitId"));

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EntryTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<int>("ExhibitorPassId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ExitTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.HasKey("ExhibitorEntryExitId");

                    b.HasIndex("ExhibitorPassId");

                    b.ToTable("ExhibitorEntryExits");

                    b.HasData(
                        new
                        {
                            ExhibitorEntryExitId = 1,
                            Date = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryTime = new TimeSpan(0, 10, 10, 15, 0),
                            ExhibitorPassId = 1,
                            ExitTime = new TimeSpan(0, 12, 10, 20, 0)
                        },
                        new
                        {
                            ExhibitorEntryExitId = 2,
                            Date = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryTime = new TimeSpan(0, 11, 11, 20, 0),
                            ExhibitorPassId = 2,
                            ExitTime = new TimeSpan(0, 1, 20, 10, 0)
                        },
                        new
                        {
                            ExhibitorEntryExitId = 3,
                            Date = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryTime = new TimeSpan(0, 10, 30, 15, 0),
                            ExhibitorPassId = 3,
                            ExitTime = new TimeSpan(0, 11, 10, 30, 0)
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.ExhibitorPass", b =>
                {
                    b.Property<int>("ExhibitorPassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExhibitorPassId"));

                    b.Property<int>("ExhibitorId")
                        .HasColumnType("int");

                    b.Property<int?>("PavilionId")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ValidFrom")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<DateTime?>("ValidUntil")
                        .IsRequired()
                        .HasColumnType("date");

                    b.HasKey("ExhibitorPassId");

                    b.HasIndex("ExhibitorId");

                    b.HasIndex("PavilionId");

                    b.ToTable("ExhibitorPasses");

                    b.HasData(
                        new
                        {
                            ExhibitorPassId = 1,
                            ExhibitorId = 1,
                            PersonName = "Thuaha",
                            ValidFrom = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidUntil = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ExhibitorPassId = 2,
                            ExhibitorId = 2,
                            PersonName = "Fahad",
                            ValidFrom = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidUntil = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ExhibitorPassId = 3,
                            ExhibitorId = 3,
                            PersonName = "Shila",
                            ValidFrom = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidUntil = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Fair", b =>
                {
                    b.Property<int>("FairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FairId"));

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("FairName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDeadLine")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.HasKey("FairId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Fairs");

                    b.HasData(
                        new
                        {
                            FairId = 1,
                            EndDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FairName = "internatonal trade fair",
                            Location = "Agargong",
                            OrganizerId = 1,
                            RegistrationDeadLine = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FairId = 2,
                            EndDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FairName = "Book fair",
                            Location = "Hatirjil",
                            OrganizerId = 2,
                            RegistrationDeadLine = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FairId = 3,
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FairName = " Job fair",
                            Location = "Dhaka",
                            OrganizerId = 3,
                            RegistrationDeadLine = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FairId = 4,
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FairName = "Business fair",
                            Location = "Agargong",
                            OrganizerId = 4,
                            RegistrationDeadLine = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Rating")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("FeedBackId");

                    b.HasIndex("VisitorId");

                    b.ToTable("FeedBacks");

                    b.HasData(
                        new
                        {
                            FeedBackId = 1,
                            Comment = "very good ",
                            Rating = 5m,
                            VisitorId = 1
                        },
                        new
                        {
                            FeedBackId = 2,
                            Comment = " good ",
                            Rating = 4m,
                            VisitorId = 2
                        },
                        new
                        {
                            FeedBackId = 3,
                            Comment = "Khub valo ",
                            Rating = 5m,
                            VisitorId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Organizer", b =>
                {
                    b.Property<int>("OrganizerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizerId"));

                    b.Property<string>("OrganizerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WebSiteUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganizerId");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            OrganizerId = 1,
                            OrganizerEmail = "progoti123@gmial.com",
                            OrganizerName = "Progoti missino bangladesh",
                            OrganizerPhone = "0183157812",
                            SortDescription = "Grievance Radressal Management",
                            WebSiteUrl = "http//progogi.com"
                        },
                        new
                        {
                            OrganizerId = 2,
                            OrganizerEmail = "Sebar78@gmial.com",
                            OrganizerName = "Sebar Alo",
                            OrganizerPhone = "0183157810",
                            SortDescription = "sebar alo",
                            WebSiteUrl = "http//Saba.com"
                        },
                        new
                        {
                            OrganizerId = 3,
                            OrganizerEmail = "Jonogon21@gmial.com",
                            OrganizerName = "Jonogon er sohojogita",
                            OrganizerPhone = "0183857812",
                            SortDescription = "Jonogon er sohojogita",
                            WebSiteUrl = "http//Jonogon21.com"
                        },
                        new
                        {
                            OrganizerId = 4,
                            OrganizerEmail = "Saba23@gmial.com",
                            OrganizerName = "Saba Organnizer",
                            OrganizerPhone = "0182357812",
                            SortDescription = "",
                            WebSiteUrl = "http//Saba.com"
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Parking", b =>
                {
                    b.Property<int>("ParkingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingId"));

                    b.Property<TimeSpan?>("CheckInTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("CheckOutTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ParkingDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<decimal?>("ParkingFare")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<int>("Token")
                        .HasColumnType("int");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("ParkingId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            ParkingId = 1,
                            CheckInTime = new TimeSpan(0, 10, 40, 12, 0),
                            CheckOutTime = new TimeSpan(0, 12, 20, 10, 0),
                            NumberPlate = "DHAKA-D-10-9851",
                            ParkingDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingFare = 100m,
                            Token = 5,
                            VehicleType = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            ParkingId = 2,
                            CheckInTime = new TimeSpan(0, 11, 40, 10, 0),
                            CheckOutTime = new TimeSpan(0, 12, 30, 10, 0),
                            NumberPlate = "DHAKA-H-15-5684",
                            ParkingDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingFare = 80m,
                            Token = 7,
                            VehicleType = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            ParkingId = 3,
                            CheckInTime = new TimeSpan(0, 10, 40, 12, 0),
                            CheckOutTime = new TimeSpan(0, 12, 20, 10, 0),
                            NumberPlate = "DHAKA-D-10-2354",
                            ParkingDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingFare = 150m,
                            Token = 5,
                            VehicleType = 1,
                            VisitorId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.ParkingPass", b =>
                {
                    b.Property<int>("ParkingPassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingPassId"));

                    b.Property<TimeSpan?>("CheckInTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("CheckOutTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<int>("ExhibitorId")
                        .HasColumnType("int");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ParkingDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int>("Token")
                        .HasColumnType("int");

                    b.HasKey("ParkingPassId");

                    b.HasIndex("ExhibitorId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("ParkingPasses");

                    b.HasData(
                        new
                        {
                            ParkingPassId = 1,
                            CheckInTime = new TimeSpan(0, 9, 10, 15, 0),
                            CheckOutTime = new TimeSpan(0, 12, 20, 15, 0),
                            ExhibitorId = 1,
                            NumberPlate = "DHAKA-D-11-9999",
                            ParkingDate = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Token = 11
                        },
                        new
                        {
                            ParkingPassId = 2,
                            CheckInTime = new TimeSpan(0, 11, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 1, 30, 15, 0),
                            ExhibitorId = 2,
                            NumberPlate = "DHAKA-D-07-1234",
                            ParkingDate = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Token = 18
                        },
                        new
                        {
                            ParkingPassId = 3,
                            CheckInTime = new TimeSpan(0, 10, 10, 15, 0),
                            CheckOutTime = new TimeSpan(0, 11, 20, 15, 0),
                            ExhibitorId = 3,
                            NumberPlate = "DHAKA-D-20-9567",
                            ParkingDate = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Token = 13
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Pavilion", b =>
                {
                    b.Property<int>("PavilionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PavilionId"));

                    b.Property<int>("PavilionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PavilionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PavilionNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Rent")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("SqFoot")
                        .HasColumnType("float");

                    b.HasKey("PavilionId");

                    b.HasIndex("PavilionCategoryId");

                    b.ToTable("Pavilions");

                    b.HasData(
                        new
                        {
                            PavilionId = 1,
                            PavilionCategoryId = 1,
                            PavilionName = "Corner Pavilion A",
                            PavilionNumber = "C-101",
                            Rent = 6000m,
                            Size = "10X12",
                            SqFoot = 120.0
                        },
                        new
                        {
                            PavilionId = 2,
                            PavilionCategoryId = 1,
                            PavilionName = "Corner Pavilion B",
                            PavilionNumber = "C-201",
                            Rent = 6000m,
                            Size = "10X10",
                            SqFoot = 100.0
                        },
                        new
                        {
                            PavilionId = 3,
                            PavilionCategoryId = 3,
                            PavilionName = "Island Pavilion",
                            PavilionNumber = "I-202",
                            Rent = 3200m,
                            Size = "8X8",
                            SqFoot = 64.0
                        },
                        new
                        {
                            PavilionId = 4,
                            PavilionCategoryId = 4,
                            PavilionName = "Box Pavilion 1",
                            PavilionNumber = "B-203",
                            Rent = 8640m,
                            Size = "12X12",
                            SqFoot = 144.0
                        },
                        new
                        {
                            PavilionId = 5,
                            PavilionCategoryId = 5,
                            PavilionName = "Box Pavilion 2",
                            PavilionNumber = "B-204",
                            Rent = 8640m,
                            Size = "12X12",
                            SqFoot = 144.0
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.PavilionCategory", b =>
                {
                    b.Property<int>("PavilionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PavilionCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FarePerSquareFeet")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<int>("PavilionType")
                        .HasColumnType("int");

                    b.HasKey("PavilionCategoryId");

                    b.ToTable("PavilionCategorys");

                    b.HasData(
                        new
                        {
                            PavilionCategoryId = 1,
                            CategoryName = "C-1",
                            Description = "L-Shape left Side Corner Pavilion",
                            FarePerSquareFeet = 50m,
                            PavilionType = 1
                        },
                        new
                        {
                            PavilionCategoryId = 2,
                            CategoryName = "B-31",
                            Description = " left Side Box Pavilion",
                            FarePerSquareFeet = 60m,
                            PavilionType = 2
                        },
                        new
                        {
                            PavilionCategoryId = 3,
                            CategoryName = "I-1",
                            Description = "Island Pavilion",
                            FarePerSquareFeet = 50m,
                            PavilionType = 3
                        },
                        new
                        {
                            PavilionCategoryId = 4,
                            CategoryName = "B-41",
                            Description = " Middle North Side Box Pavilion",
                            FarePerSquareFeet = 60m,
                            PavilionType = 2
                        },
                        new
                        {
                            PavilionCategoryId = 5,
                            CategoryName = "B-43",
                            Description = "Middle South Side Box Pavilion",
                            FarePerSquareFeet = 60m,
                            PavilionType = 2
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<int>("ExhibitorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int>("PaymentFor")
                        .HasColumnType("int");

                    b.Property<int>("PaymentThrough")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("ExhibitorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 20000m,
                            ExhibitorId = 1,
                            PaymentDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentFor = 1,
                            PaymentThrough = 5,
                            TicketId = 1
                        },
                        new
                        {
                            PaymentId = 2,
                            Amount = 110m,
                            ExhibitorId = 2,
                            PaymentDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentFor = 0,
                            PaymentThrough = 1,
                            TicketId = 2
                        },
                        new
                        {
                            PaymentId = 3,
                            Amount = 500m,
                            ExhibitorId = 3,
                            PaymentDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentFor = 2,
                            PaymentThrough = 6,
                            TicketId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Sponsor", b =>
                {
                    b.Property<int>("SponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponsorId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SponsorId");

                    b.ToTable("Sponsors");

                    b.HasData(
                        new
                        {
                            SponsorId = 1,
                            City = "Dhaka",
                            CompanyName = "Walton",
                            Email = "walton@gmail.com",
                            Industry = "Walton Hi-Tech Industries",
                            Phone = "01322110044",
                            Website = "www.waltonbd.com"
                        },
                        new
                        {
                            SponsorId = 2,
                            City = "Gazipur",
                            CompanyName = "Akij Group",
                            Email = "akij@gmail.com",
                            Industry = "Akij Group of Company",
                            Phone = "01422110044",
                            Website = "www.akijbd.com"
                        },
                        new
                        {
                            SponsorId = 3,
                            City = "Savar",
                            CompanyName = "Square Farma",
                            Email = "square@gmail.com",
                            Industry = "Square Pharmacitical Company",
                            Phone = "01722110044",
                            Website = "www.squarebd.com"
                        },
                        new
                        {
                            SponsorId = 4,
                            City = "All District",
                            CompanyName = "Daraz",
                            Email = "daraz@gmail.com",
                            Industry = "Daraz Online Shop",
                            Phone = "01822110044",
                            Website = "www.daraz.com"
                        },
                        new
                        {
                            SponsorId = 5,
                            City = "Narayanganj",
                            CompanyName = "Pran",
                            Email = "pran@gmail.com",
                            Industry = "Pran Industry",
                            Phone = "01922110044",
                            Website = "www.pranbd.com"
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.StaffDetail", b =>
                {
                    b.Property<int>("StaffDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffDetailId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StaffDetailId");

                    b.ToTable("StaffDetails");

                    b.HasData(
                        new
                        {
                            StaffDetailId = 1,
                            Email = "rahman@gmail.com",
                            Gender = 1,
                            Phone = "01322110044",
                            Picture = "1.jpg",
                            StaffName = "AR Rahman"
                        },
                        new
                        {
                            StaffDetailId = 2,
                            Email = "runa@gmail.com",
                            Gender = 2,
                            Phone = "01422110044",
                            Picture = "2.jpg",
                            StaffName = "Runa"
                        },
                        new
                        {
                            StaffDetailId = 3,
                            Email = "momin@gmail.com",
                            Gender = 1,
                            Phone = "01722110044",
                            Picture = "3.jpg",
                            StaffName = "Momin"
                        },
                        new
                        {
                            StaffDetailId = 4,
                            Email = "mahmudul@gmail.com",
                            Gender = 1,
                            Phone = "01822110044",
                            Picture = "4.jpg",
                            StaffName = "Mahmudul"
                        },
                        new
                        {
                            StaffDetailId = 5,
                            Email = "parul@gmail.com",
                            Gender = 2,
                            Phone = "01922110044",
                            Picture = "5.jpg",
                            StaffName = "Parul"
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            IssueDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10m,
                            Quantity = 12,
                            VisitorId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            IssueDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10m,
                            Quantity = 11,
                            VisitorId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            IssueDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 500m,
                            Quantity = 1,
                            VisitorId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            VenueId = 1,
                            Capacity = 300,
                            Location = "West South Corner",
                            VenueName = "Venue 1"
                        },
                        new
                        {
                            VenueId = 2,
                            Capacity = 400,
                            Location = "West side",
                            VenueName = "Venue 2"
                        },
                        new
                        {
                            VenueId = 3,
                            Capacity = 200,
                            Location = " South Corner",
                            VenueName = "Venue 3"
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VisitorId");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            Email = "a123@gmail.com",
                            Gender = 2,
                            Nationality = "Bangladeshi",
                            Phone = "0214587525",
                            VisitorName = "A"
                        },
                        new
                        {
                            VisitorId = 2,
                            Email = "b123@gmail.com",
                            Gender = 1,
                            Nationality = "Indian",
                            Phone = "0214587525",
                            VisitorName = "B"
                        },
                        new
                        {
                            VisitorId = 3,
                            Email = "c123@gmail.com",
                            Gender = 3,
                            Nationality = "Pakistani",
                            Phone = "0214587525",
                            VisitorName = "C"
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.VisitorEntry", b =>
                {
                    b.Property<int>("VisitorEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorEntryId"));

                    b.Property<DateTime?>("EntryDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EntryTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("VisitorEntryId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("VisitorEntry");

                    b.HasData(
                        new
                        {
                            VisitorEntryId = 1,
                            EntryDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryTime = new TimeSpan(0, 10, 10, 10, 0),
                            TicketId = 1
                        },
                        new
                        {
                            VisitorEntryId = 2,
                            EntryDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryTime = new TimeSpan(0, 11, 20, 30, 0),
                            TicketId = 2
                        },
                        new
                        {
                            VisitorEntryId = 3,
                            EntryDate = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryTime = new TimeSpan(0, 12, 11, 10, 0),
                            TicketId = 3
                        });
                });

            modelBuilder.Entity("TFMS.Lib.Models.Attendence", b =>
                {
                    b.HasOne("TFMS.Lib.Models.StaffDetail", "StaffDetail")
                        .WithMany("Attendences")
                        .HasForeignKey("StaffDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffDetail");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Booking", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Exhibitor", "Exhibitor")
                        .WithMany("Bookings")
                        .HasForeignKey("ExhibitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFMS.Lib.Models.Pavilion", "Pavilion")
                        .WithOne("Booking")
                        .HasForeignKey("TFMS.Lib.Models.Booking", "PavilionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibitor");

                    b.Navigation("Pavilion");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Event", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("TFMS.Lib.Models.EventReg", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Event", "Event")
                        .WithMany("EventRegs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFMS.Lib.Models.Visitor", "Visitor")
                        .WithMany("EventRegs")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TFMS.Lib.Models.ExhibitorEntryExit", b =>
                {
                    b.HasOne("TFMS.Lib.Models.ExhibitorPass", "ExhibitorPass")
                        .WithMany("ExhibitorEntryExits")
                        .HasForeignKey("ExhibitorPassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExhibitorPass");
                });

            modelBuilder.Entity("TFMS.Lib.Models.ExhibitorPass", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Exhibitor", "Exhibitor")
                        .WithMany("ExhibitorPasses")
                        .HasForeignKey("ExhibitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFMS.Lib.Models.Pavilion", null)
                        .WithMany("ExhibitorPasses")
                        .HasForeignKey("PavilionId");

                    b.Navigation("Exhibitor");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Fair", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Organizer", "Organizer")
                        .WithMany("Fairs")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("TFMS.Lib.Models.FeedBack", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Visitor", "Visitor")
                        .WithMany("FeedBacks")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Parking", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Visitor", "Visitor")
                        .WithMany("Parkings")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TFMS.Lib.Models.ParkingPass", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Exhibitor", "Exhibitor")
                        .WithMany("ParkingPass")
                        .HasForeignKey("ExhibitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFMS.Lib.Models.Organizer", null)
                        .WithMany("ParkingPass")
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Exhibitor");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Pavilion", b =>
                {
                    b.HasOne("TFMS.Lib.Models.PavilionCategory", "PavilionCategory")
                        .WithMany("Pavilions")
                        .HasForeignKey("PavilionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PavilionCategory");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Payment", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Exhibitor", "Exhibitor")
                        .WithMany()
                        .HasForeignKey("ExhibitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFMS.Lib.Models.Ticket", "Ticket")
                        .WithMany("Payments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibitor");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Ticket", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Visitor", "Visitor")
                        .WithMany("Tickets")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TFMS.Lib.Models.VisitorEntry", b =>
                {
                    b.HasOne("TFMS.Lib.Models.Ticket", "Ticket")
                        .WithOne("VisitorEntry")
                        .HasForeignKey("TFMS.Lib.Models.VisitorEntry", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Event", b =>
                {
                    b.Navigation("EventRegs");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Exhibitor", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ExhibitorPasses");

                    b.Navigation("ParkingPass");
                });

            modelBuilder.Entity("TFMS.Lib.Models.ExhibitorPass", b =>
                {
                    b.Navigation("ExhibitorEntryExits");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Organizer", b =>
                {
                    b.Navigation("Fairs");

                    b.Navigation("ParkingPass");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Pavilion", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("ExhibitorPasses");
                });

            modelBuilder.Entity("TFMS.Lib.Models.PavilionCategory", b =>
                {
                    b.Navigation("Pavilions");
                });

            modelBuilder.Entity("TFMS.Lib.Models.StaffDetail", b =>
                {
                    b.Navigation("Attendences");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Ticket", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("VisitorEntry");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TFMS.Lib.Models.Visitor", b =>
                {
                    b.Navigation("EventRegs");

                    b.Navigation("FeedBacks");

                    b.Navigation("Parkings");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
